is defines new terms
of instantiates a type parameter
implements specifies a trait implemented by an idea
  as specifies the implementation
has specifies a property pertaining to an idea
where backward specifies an idea

"x of y" is equivalent to
"constrains (x ...) to y"
  where the latter specifies parameters by position
  and the former by name

constraining "things" are closed under "and"
  i.e. map of (string and integer)

arithmetic is

digit is (type digit-syms)
  where digit-syms is (map (range 0 9)
    (func (digit) (digit to symbol)))

number is list
  constrains (list element) to digit of base

  has base

  implements field from library arithmetic as
    add is
    add is (func (x) ())
    sub is (func (x)
	  (let (nums ((sort-by greatest) length (list self x)))
	       (append ((nums index 0 length) sub (nums index 1 length) zeros))
	    (map ))
    equals is (func (x)
      (let (zipped-num (zip self x))
        ((zipped-num ok) and
          (reduce-by and
		    (map zipped-num (func ((a b)) (equals a b)))))))
